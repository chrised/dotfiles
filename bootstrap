#!/bin/bash
############################
# This script creates symlinks from the home directory to any desired dotfiles in ~/dotfiles
############################

HOSTTYPE=$(uname -s)

INSTALL_HOMEBREW=0


function result() {
    if [ $? = 0 ]; then
        printf ' [\033[0;32mOK\033[0m]\n'
    else
        printf ' [\033[0;31mERROR\033[0m]\n'
    fi
}

########## Variables
topdir="$(git rev-parse --show-toplevel)"
dir=~/.dotfiles                    # dotfiles directory
olddir=~/.dotfiles_old             # old dotfiles backup directory
# list of files/folders to symlink in homedir
home_files="bashrc bashrc_functions vimrc gvimrc vim gitignore_global subversion eslintrc emacs.d hyper.js bash_completion bash_completions"
# list of files/folders to symlink in $HOME/.config/
config_files="nvim"
rm_files="emacs"

datestr=$(date -u "+%Y%m%d-%H%M")


########## Create symlinks

# create dotfiles_old in homedir
echo "Creating $olddir-$datestr for backup of any existing dotfiles in ~"
if [ ! -d "$olddir-$datestr" ]; then
    mkdir -p "$olddir-$datestr"
fi

# change to the dotfiles directory
echo "Changing to the $dir directory"
cd $dir || exit

# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks
echo "Backing up dotfiles to files from ~ to $olddir-$datestr/"
for file in ${home_files}; do
    if [ -d ~/."$file" ]; then
        cp -LR ~/."$file" "$olddir-$datestr"/
        rm -rf ~/."$file"
    elif [ -e ~/."$file" ]; then
        cp -L ~/."$file" "$olddir-$datestr"/
        rm -f ~/."$file"
    elif file ~/."${file}" | grep "broken symbolic link"; then
        rm ~/."$file"
    fi
    echo -n "Creating symlink to $file in home directory."
    ln -s "$dir/homefiles/$file" "$HOME/.$file"
    result
done

[ ! -d "${HOME}/.config" ] && mkdir -p "${HOME}/.config"
for file in ${config_files}; do
    if [ -d "${HOME}/.config/$file" ]; then
        cp -LR "${HOME}/.config/$file" "$olddir-$datestr/.config"
        rm -rf "${HOME}/.config/$file"
    elif [ -e "${HOME}/.config/$file" ]; then
        cp -L "${HOME}/.config/$file" "$olddir-$datestr/.config"
        rm -f "${HOME}/.config/$file"
    elif file "${HOME}/.config/${file}" | grep "broken symbolic link"; then
        rm "${HOME}/.config/$file"
    fi
    echo -n "Creating symlink to $file in $HOME/.config directory."
    ln -s "$dir/configfiles/$file" "${HOME}/.config/$file"
    result
done

file "${HOME}/.config/nvim/init.vim" | grep "broken symbolic link" > /dev/null 2>&1 && rm "${HOME}/.config/nvim/init.vim"
[ ! -f "${HOME}/.config/nvim/init.vim" ] && ln -s "${dir}/homefiles/vimrc" "${HOME}/.config/nvim/init.vim"

for file in $rm_files; do
    if [ -e ~/."${file}" ]; then
        cp -L ~/."${file}" "${olddir}-${datestr}"/
        rm -f ~/."${file}"
    fi
done

# Handle the bashrc/bash_profile mess
[[ -f ~/.bash_profile ]] && cp -LR ~/.bash_profile "$olddir-$datestr"/ && rm -rf ~/.bash_profile
echo -n "Making a mess of bashrc and bash_profile"
file ~/.bash_profile | grep "broken symbolic link" > /dev/null 2>&1 && rm ~/.bash_profile
ln -s ~/.bashrc ~/.bash_profile
result


# Finally, set up powerline-fonts
echo "Installing powerline-fonts"
"$HOME/.vim/powerline-fonts/install.sh"

# local bashrc hint
[[ ! -f ~/.bashrc.local ]] && echo "Note: Custom bashrc/profile options can be added in ~/.bashrc.local"

missing_linters=0
linters="shellcheck syntaxerl pep8 flake8"
for linter in $linters; do
    if [ ! "$(which "$linter")" ]; then
        missing_linters="$((missing_linters + 1))"
        echo "$linter not found. Please install"
    fi
done

# javascript linting hints
jslinters="jshint eslint"
for linter in $jslinters; do
    if [ ! "$(which "$linter")" ]; then
        missing_linters="$((missing_linters + 1))"
        echo "$linter not found, install with:"
        echo "npm install -g $linter"
    fi
done

if [[ $missing_linters -gt 0 ]]; then
    printf "You are missing %s linters [\033[0;31mERROR\033[0m]\n" "$missing_linters"
else
    printf "All expected linters were detected. [\033[0;32mOK\033[0m]\n"
fi

echo "Running arbitrary application configuration commands"

# Git lg alias: https://coderwall.com/p/euwpig/a-better-git-log
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
# Gitignore globals
git config --global core.excludesfile "$HOME/.gitignore_global"
# Simple git pushing
git config --global push.default simple
# Set editor
git config --global core.editor vim
# Set git d as difftool -> vimdiff
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global alias.d difftool

if [[ "$HOSTTYPE" = "Darwin" ]]; then
    echo
    echo "Ah, this is a Mac, let's do some Mac setup too!"
    if [[ "$INSTALL_HOMEBREW" -eq 1 ]]; then
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    if [ ! -f ~/.xvimrc ]; then
        ln -s ~/.vimrc ~/.xvimrc
    fi
    for f in $dir/$HOSTTYPE/Library/Preferences/*; do
        cp -n "$f" "$HOME/Library/Preferences" && \
            echo "Copied $f into $HOME/Library/Preferences/"
    done
    defaults write -g KeyRepeat -int 2
    defaults write -g ApplePressAndHoldEnabled -bool false
fi

echo "Configuring Applications"
for app in ${topdir}/apps/*; do
    appname=$(basename "${app}")
    if [ -f "${dir}/scripts/${appname}" ]; then
        echo "Configuring: ${appname}"
        "${dir}/scripts/${appname}"
    fi
done

echo
echo "Dotfiles bootstrap complete."

