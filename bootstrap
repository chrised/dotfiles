#!/bin/bash
############################
# This script creates symlinks from the home directory to any desired dotfiles in ~/dotfiles
############################

# First up, update any and all submodules
git submodule update --remote

HOSTTYPE=$(uname -s)

INSTALL_HOMEBREW=0


function result() {
    # shellcheck disable=SC2181
    if [ ${?} = 0 ]; then
        printf ' [\033[0;32mOK\033[0m]\n'
    else
        printf ' [\033[0;31mERROR\033[0m]\n'
    fi
}

########## Variables
REPO_ROOT="$(git rev-parse --show-toplevel)"
DOTFILES_DIR="${HOME}/.dotfiles"         # dotfiles directory
BACKUP_PREFIX="${HOME}/.dotfiles_old"  # old dotfiles backup directory
BACKUP_SUFFIX=$(date -u "+%Y%m%d-%H%M")
# list of files/folders to symlink in homedir
HOME_FILES="bashrc bashrc_functions vimrc vim gitignore_global eslintrc bash_completion bash_completions"
if [ "${HOSTTYPE}" != "Linux" ]; then
    HOME_FILES="${HOME_FILES} gvimrc-nonlinux"
else
    HOME_FILES="${HOME_FILES} gvimrc"
fi
# list of files/folders to symlink in $HOME/.config/
CONFIG_FILES="nvim"
RM_FILES="emacs"



# create dotfiles_old in homedir
echo "Creating ${BACKUP_PREFIX}-${BACKUP_SUFFIX} for backup of any existing dotfiles in ~"
if [ ! -d "${BACKUP_PREFIX}-${BACKUP_SUFFIX}" ]; then
    mkdir -p "${BACKUP_PREFIX}-${BACKUP_SUFFIX}"
fi


# change to the dotfiles directory
echo "Changing to the ${DOTFILES_DIR} directory"
cd ${DOTFILES_DIR} || exit


# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks
echo "Backing up dotfiles to files from ~ to ${BACKUP_PREFIX}-${BACKUP_SUFFIX}/"
for file in ${HOME_FILES}; do
    if [ -d ~/."${file}" ]; then
        cp -LR ~/."${file}" "${BACKUP_PREFIX}-${BACKUP_SUFFIX}"/
        rm -rf ~/."${file}"
    elif [ -e ~/."${file}" ]; then
        cp -L ~/."${file}" "${BACKUP_PREFIX}-${BACKUP_SUFFIX}"/
        rm -f ~/."${file}"
    elif file ~/."${file}" | grep "broken symbolic link"; then
        rm ~/."${file}"
    fi
    echo -n "Creating symlink to $file in home directory."
    destfile=${file}
    [ "${file}" = "gvimrc-nonlinux" ] && destfile="gvimrc"
    ln -s "${DOTFILES_DIR}/homefiles/${file}" "${HOME}/.${destfile}"
    result
done


echo "Trimming old backups of dotfiles"
BACKUPS_TO_KEEP="$(ls -d ${BACKUP_PREFIX}-* | sort | tail -n 4)"
for f in "${BACKUP_PREFIX}-"*; do
    if ! echo "${BACKUPS_TO_KEEP}" | grep "${f}" -q; then
        echo "Removing backup: ${f}"
        rm -rf "${f}"
    fi
done


echo "Installing dotfiles"
# Install the current dotfiles
[ ! -d "${HOME}/.config" ] && mkdir -p "${HOME}/.config"
for file in ${CONFIG_FILES}; do
    if [ -d "${HOME}/.config/${file}" ]; then
        cp -LR "${HOME}/.config/${file}" "${BACKUP_PREFIX}-${BACKUP_SUFFIX}/.config"
        rm -rf "${HOME}/.config/${file}"
    elif [ -e "${HOME}/.config/${file}" ]; then
        cp -L "${HOME}/.config/${file}" "${BACKUP_PREFIX}-${BACKUP_SUFFIX}/.config"
        rm -f "${HOME}/.config/${file}"
    elif file "${HOME}/.config/${file}" | grep "broken symbolic link"; then
        rm "${HOME}/.config/${file}"
    fi
    destfile=${file}
    echo -n "Creating symlink to ${file} in ${HOME}/.config directory."
    ln -s "${DOTFILES_DIR}/configfiles/${file}" "${HOME}/.config/${destfile}"
    result
done

file "${HOME}/.config/nvim/init.vim" | grep "broken symbolic link" > /dev/null 2>&1 && rm "${HOME}/.config/nvim/init.vim"
[ ! -f "${HOME}/.config/nvim/init.vim" ] && ln -s "${DOTFILES_DIR}/homefiles/vimrc" "${HOME}/.config/nvim/init.vim"

for file in $RM_FILES; do
    if [ -e ~/."${file}" ]; then
        cp -L ~/."${file}" "${BACKUP_PREFIX}-${BACKUP_SUFFIX}"/
        rm -f ~/."${file}"
    fi
done

# Handle the bashrc/bash_profile mess
[[ -f ~/.bash_profile ]] && cp -LR ~/.bash_profile "${BACKUP_PREFIX}-${BACKUP_SUFFIX}"/ && rm -rf ~/.bash_profile
echo -n "Making a mess of bashrc and bash_profile"
file ~/.bash_profile | grep "broken symbolic link" > /dev/null 2>&1 && rm ~/.bash_profile
ln -s ~/.bashrc ~/.bash_profile
result


# Finally, set up powerline-fonts
echo "Installing powerline-fonts"
"${REPO_ROOT}/submodules/fonts/install.sh"

# local bashrc hint
[[ ! -f ~/.bashrc.local ]] && echo "Note: Custom bashrc/profile options can be added in ~/.bashrc.local"


echo "Running arbitrary application configuration commands"

# Set privacy email for this repo (dotfiles)
git config user.email 7331206+chrised@users.noreply.github.com
# Git lg alias: https://coderwall.com/p/euwpig/a-better-git-log
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
# Gitignore globals
git config --global core.excludesfile "$HOME/.gitignore_global"
# Simple git pushing
git config --global push.default simple
# Set editor
git config --global core.editor vim
# Set git d as difftool -> vimdiff
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global alias.d difftool

if [ "${HOSTTYPE}" = "Darwin" ]; then
    echo
    echo "Ah, this is a Mac, let's do some Mac setup too!"
    if [ "${INSTALL_HOMEBREW}" -eq 1 ]; then
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    if [ ! -f ~/.xvimrc ]; then
        ln -s ~/.vimrc ~/.xvimrc
    fi
    for f in "${DOTFILES_DIR}/${HOSTTYPE}/Library/Preferences"/*; do
        cp -n "${f}" "${HOME}/Library/Preferences" && \
            echo "Copied ${f} into ${HOME}/Library/Preferences/"
    done
    defaults write -g KeyRepeat -int 2
    defaults write -g ApplePressAndHoldEnabled -bool false
fi

echo "Configuring Applications"
for app in "${REPO_ROOT}/apps"/*; do
    appname=$(basename "${app}")
    if [ -f "${DOTFILES_DIR}/scripts/${appname}" ]; then
        echo "Configuring: ${appname}"
        "${DOTFILES_DIR}/scripts/${appname}"
    fi
done

echo
echo "Dotfiles bootstrap complete."
